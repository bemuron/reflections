--What happens when you initialize a repository? Why do you need to do it?
The directory becomes a git directory whose history can be tracked by git. A hidden .git file is created within the directory.
You need to do it because that is the only way to get git to be able to track files in that directory.

--How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is a temporary location that files are put before a commit to the repository is done where as working directory 
is the directory that contains the original files. The stating area provides the liberty to select which files are to be commited
or not and when to commit them.

--How can you use the staging area to make sure you have one commit per logical change?
Each time a logical change is made to a file, it should be added to the staging area and then commited.

--What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1. Incase i want to try out a new feature without altering the code on the main branch.
2. Incase i want to create a different version of the same code but with some litlle changes.
Branches help to organise different versions of code without altering the main branch.

--How do the diagrams help you visualize the branch structure?
They help you understand better the commit history and the relationships between each commit e.g parent commit. you can also
be able to figure out commits that may nit be tracked.

--What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging creates a unified branch of the branches merged. It is easy to see the parent commits in the diagram.

--What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
*Pros
-prevents forgeting to merge
-handles details that go into merging
*cons
-may merge what you did not intend to merge
-since its automatic, you cant easily know what has been merged

** A Remote: Git’s concept of a remote repository that enables you store the location of a repository that we will 
want to send and recieve new commits from.  